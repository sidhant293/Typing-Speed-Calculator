{"version":3,"sources":["Preview.js","Speed.js","getText.js","App.js","serviceWorker.js","index.js"],"names":["Preview","props","displayText","text","split","map","s","i","color","userInput","length","className","key","style","backgroundColor","Speed","symbols","sec","wpm","Math","round","getText","floor","random","initialState","started","finished","App","onRestart","setState","onUserInputChange","event","val","target","value","setTimer","onFinished","countSymbols","state","this","clearInterval","interval","setInterval","prevProps","replace","filter","placeholder","onChange","readOnly","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAmBeA,EAjBC,SAACC,GACb,IAEMC,EAFKD,EAAME,KAAKC,MAAM,IAELC,KAAI,SAACC,EAAEC,GAC1B,IAAIC,EAIJ,OAHGD,EAAEN,EAAMQ,UAAUC,SAClBF,EAAOF,IAAIL,EAAMQ,UAAUF,GAAG,UAAU,WAEpC,0BAAMI,UAAU,2BAA2BC,IAAKL,EAAGM,MAAO,CAACC,gBAAgBN,IAASF,MAG/F,OACI,6BAASK,UAAU,mDACf,yBAAKA,UAAU,mBAAmBT,KCF/Ba,EAXH,SAACd,GACT,GAAmB,IAAhBA,EAAMe,SAA2B,IAAZf,EAAMgB,IAAQ,CAClC,IAAMC,EAAKjB,EAAMe,QAAQ,GAAIf,EAAMgB,IAAI,IAC3C,OACA,yBAAKN,UAAU,OAAf,iBAAoCQ,KAAKC,MAAMF,IAG/C,OACI,yBAAKP,UAAU,OAAf,oBCCOU,EAXD,WACV,IAAMlB,EAAK,CACP,4RACA,gsBACA,4eACA,qVACA,0YACA,4WAEJ,OAAOA,EAAKgB,KAAKG,MAAMH,KAAKI,SAASpB,EAAKO,UCJxCc,EAAe,CACnBrB,KAAMkB,IACNZ,UAAW,GACXO,QAAQ,EACRC,IAAI,EACJQ,SAAQ,EACRC,UAAS,GAsEIC,E,kDAjEb,aAAe,IAAD,8BACZ,gBAIFC,UAAY,WACV,EAAKC,SAAS,CACZ1B,KAAMkB,IACNZ,UAAW,GACXO,QAAQ,EACRC,IAAI,EACJQ,SAAQ,EACRC,UAAS,KAZC,EAgBdI,kBAAkB,SAACC,GACjB,IAAMC,EAAID,EAAME,OAAOC,MACvB,EAAKC,WACL,EAAKC,WAAWJ,GAChB,EAAKH,SAAS,CACZpB,UAAUuB,EACVhB,QAAQ,EAAKqB,aAAaL,MApB5B,EAAKM,MAAQd,EAFD,E,uDA0BHf,GACNA,IAAY8B,KAAKD,MAAMnC,OACxBqC,cAAcD,KAAKE,UACnBF,KAAKV,SAAS,CAACH,UAAS,O,iCAIjB,IAAD,OACJa,KAAKD,MAAMb,UACbc,KAAKV,SAAS,CAACJ,SAAQ,IACvBc,KAAKE,SAASC,aAAY,WACxB,EAAKb,UAAS,SAAAc,GACZ,MAAO,CAAC1B,IAAI0B,EAAU1B,IAAI,QAE5B,Q,mCAIOR,GACX,IAAMN,EAAKoC,KAAKD,MAAMnC,KAAKyC,QAAQ,IAAI,IACvC,OAAOnC,EAAUmC,QAAQ,IAAI,IAAIxC,MAAM,IAAIyC,QAAO,SAACvC,EAAEC,GACpD,OAAOD,IAAIH,EAAKI,MACdG,S,+BAIH,OACE,yBAAKC,UAAU,MACb,wBAAIA,UAAU,eAAd,2BACA,kBAAC,EAAD,CAASR,KAAMoC,KAAKD,MAAMnC,KAAMM,UAAW8B,KAAKD,MAAM7B,YACtD,8BAAUE,UAAU,kEAAkEmC,YAAY,eAAeZ,MAAOK,KAAKD,MAAM7B,UAAWsC,SAAUR,KAAKT,kBAAmBkB,SAAUT,KAAKD,MAAMZ,WAErM,kBAAC,EAAD,CAAOV,QAASuB,KAAKD,MAAMtB,QAASC,IAAKsB,KAAKD,MAAMrB,MACpD,uBAAGN,UAAU,wDAAwDsC,KAAK,KAAKC,QAASX,KAAKX,WAA7F,c,GA7DUuB,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.81045ab1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Preview = (props) => {\r\n    const text=props.text.split('');\r\n\r\n    const displayText=text.map((s,i)=>{\r\n        let color;\r\n        if(i<props.userInput.length){\r\n           color= s===props.userInput[i]?'#90EE90':'#F08080';\r\n        }\r\n        return <span className=\"f6 f5-ns lh-copy measure\" key={i} style={{backgroundColor:color}}>{s}</span>\r\n    });\r\n\r\n    return (\r\n        <article className=\"center mw5 mw6-ns br3 hidden ba b--black-10 mv4\">\r\n            <div className=\"pa3 b--black-10\">{displayText}</div>\r\n        </article>\r\n    );\r\n}\r\nexport default Preview;","import React from 'react';\r\n\r\nconst Speed=(props)=>{\r\n    if(props.symbols!==0 && props.sec!==0){\r\n        const wpm=(props.symbols/5)/(props.sec/60);\r\n    return(\r\n    <div className='ma4'>Words Per Min:{Math.round(wpm)}</div>\r\n    );\r\n    }\r\n    return (\r\n        <div className='ma4'>Words Per Min:0</div>\r\n    );\r\n}\r\nexport default Speed;","const getText=()=>{\r\n    const text=[\r\n        'Closed captions were created for deaf or hard of hearing individuals to assist in comprehension. They can also be used as a tool by those learning to read, learning to speak a non-native language, or in an environment where the audio is difficult to hear or is intentionally muted.',\r\n        'Frank Edward McGurrin, a court stenographer from Salt Lake City, Utah who taught typing classes, reportedly invented touch typing in 1888. On a standard keyboard for English speakers the home row keys are: for the right hand. The keyboard is called a QWERTY keyboard because these are the first six letters on the keyboard. Most modern computer keyboards have a raised dot or bar on the home keys for the index fingers to help touch typists maintain and rediscover the correct position on the keyboard quickly with no need to look at the keys. More recently, the ability to touch type on touchscreen phones has been made possible with the use of specialized virtual keyboard software for touch typing.',\r\n        'A transcription service is a business which converts speech (either live or recorded) into a written or electronic text document. Transcription services are often provided for business, legal, or medical purposes. The most common type of transcription is from a spoken-language source into text such as a computer file suitable for printing as a document such as a report. Common examples are the proceedings of a court hearing such as a criminal trial (by a court reporter) or a physician',\r\n        'Being human makes us susceptible to the onset of feelings. The role of these emotions varies. Some of them are useful while others may be harmful. The use of social media for self-expression has reached a point that it makes us feel we can say anything. This begins when we see people expressing anything and everything that come to mind.',\r\n        'When we see everyone else voicing their likes and dislikes, their irritations and desires we tend to imitate what they do. And because many engage in this, we think that it is normal and healthy. However, when we get used to unbridled self-expression, we come to believe that all feelings are valid. We become convinced that in real life, we should also act on our emotions and our impulses.',\r\n        'Or when we develop an attraction to someone despite that person being in a relationship, and because social media has conditioned us that all feelings can be expressed, we tend to think that acting on this attraction is okay. Not all feelings deserve expression. We find ourselves creating our own problems when we let our present emotions control our actions.'\r\n    ]\r\n    return text[Math.floor(Math.random()*text.length)];\r\n}\r\nexport default getText;","import React from 'react';\nimport Preview from './Preview';\nimport Speed from './Speed';\nimport getText from './getText';\n\nconst initialState = {\n  text: getText(),\n  userInput: '',\n  symbols:0,\n  sec:0,\n  started:false,\n  finished:false\n}\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  onRestart = () => {\n    this.setState({\n      text: getText(),\n      userInput: '',\n      symbols:0,\n      sec:0,\n      started:false,\n      finished:false\n    });\n  }\n\n  onUserInputChange=(event)=>{\n    const val=event.target.value;\n    this.setTimer();\n    this.onFinished(val);\n    this.setState({\n      userInput:val,\n      symbols:this.countSymbols(val)\n    });\n  }\n\n  onFinished(userInput){\n    if(userInput===this.state.text){\n      clearInterval(this.interval);\n      this.setState({finished:true});\n    }\n  }\n\n  setTimer(){\n    if(!this.state.started){\n      this.setState({started:true});\n      this.interval=setInterval(()=>{\n        this.setState(prevProps=>{\n          return {sec:prevProps.sec+1}\n        })\n      },1000);\n    }\n  }\n\n  countSymbols(userInput){\n    const text=this.state.text.replace(' ','');\n    return userInput.replace(' ','').split('').filter((s,i)=>{\n     return s===text[i]\n    }).length;\n  }\n\n  render() {\n    return (\n      <div className='tc'>\n        <h1 className='f1 lh-solid'>Typing Speed Calculator</h1>\n        <Preview text={this.state.text} userInput={this.state.userInput}/>\n        <textarea className='border-box hover-black w-100 measure ba b--black-20 pa2 br2 mb2' placeholder='Start Typing' value={this.state.userInput} onChange={this.onUserInputChange} readOnly={this.state.finished}>\n        </textarea>\n        <Speed symbols={this.state.symbols} sec={this.state.sec}/>\n        <a className=\"f6 grow no-underline br-pill ba ph3 pv2 mb2 dib black\" href=\"#0\" onClick={this.onRestart}>Reset</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}